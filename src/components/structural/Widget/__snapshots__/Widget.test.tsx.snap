// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the widget renders with text inside 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ForwardRef>
    hello
  </ForwardRef>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": "hello",
      "forwardedComponent": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": true,
          "rules": Array [
            "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
          ],
        },
        "displayName": "Styled(Widget)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
      "forwardedRef": null,
    },
    "ref": null,
    "rendered": "hello",
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "hello",
        "forwardedComponent": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "rules": Array [
              "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
            ],
          },
          "displayName": "Styled(Widget)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
        "forwardedRef": null,
      },
      "ref": null,
      "rendered": "hello",
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`widget can take in a title and a subtitle 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ForwardRef
    subTitle="bye"
    title="Hey"
  >
    hello
  </ForwardRef>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": "hello",
      "forwardedComponent": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": true,
          "rules": Array [
            "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
          ],
        },
        "displayName": "Styled(Widget)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
      "forwardedRef": null,
      "subTitle": "bye",
      "title": "Hey",
    },
    "ref": null,
    "rendered": "hello",
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": "hello",
        "forwardedComponent": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "rules": Array [
              "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
            ],
          },
          "displayName": "Styled(Widget)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
        "forwardedRef": null,
        "subTitle": "bye",
        "title": "Hey",
      },
      "ref": null,
      "rendered": "hello",
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`widget renders with jsx element inside 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ForwardRef>
    <div>
      hello
    </div>
  </ForwardRef>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div>
        hello
      </div>,
      "forwardedComponent": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": true,
          "rules": Array [
            "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
          ],
        },
        "displayName": "Styled(Widget)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
      "forwardedRef": null,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "hello",
      },
      "ref": null,
      "rendered": "hello",
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div>
          hello
        </div>,
        "forwardedComponent": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "rules": Array [
              "
  background: white;
  box-shadow: 2px 2px 0 lightblue;
  padding: 20px;
  padding-bottom: 100px;
  position: relative;
  box-sizing: border-box;
  border-radius: 3px;
  width: 65%
",
            ],
          },
          "displayName": "Styled(Widget)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
        "forwardedRef": null,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "hello",
        },
        "ref": null,
        "rendered": "hello",
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
